import os
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import matplotlib
matplotlib.use('Agg')  # Use non-interactive backend
from pptx import Presentation
from pptx.util import Inches, Pt
from pptx.enum.text import PP_ALIGN
from pptx.dml.color import RGBColor
import re

class PPTGenerator:
    """
    Class for generating PowerPoint presentations from agent-generated content
    """
    def __init__(self, report_topic, output_dir='output'):
        """
        Initialize the PPT generator
        
        Args:
            report_topic (str): The main topic of the report
            output_dir (str): Directory to save the output files
        """
        self.report_topic = report_topic
        self.output_dir = output_dir
        self.prs = Presentation()
        self.chart_count = 0
        
        # Create output directory if it doesn't exist
        os.makedirs(output_dir, exist_ok=True)
        
        # Set up slide layouts for easy reference
        self.title_slide_layout = self.prs.slide_layouts[0]  # Title Slide
        self.title_content_layout = self.prs.slide_layouts[1]  # Title and Content
        self.section_layout = self.prs.slide_layouts[2]  # Section Header
        self.two_content_layout = self.prs.slide_layouts[3]  # Two Content
        self.title_only_layout = self.prs.slide_layouts[5]  # Title Only
        self.blank_layout = self.prs.slide_layouts[6]  # Blank
    
    def add_title_slide(self, subtitle="Generated by CrewAI Multi-Agent System"):
        """
        Add a title slide to the presentation
        
        Args:
            subtitle (str): Subtitle for the title slide
        """
        slide = self.prs.slides.add_slide(self.title_slide_layout)
        title = slide.shapes.title
        subtitle_shape = slide.placeholders[1]
        
        title.text = f"{self.report_topic}"
        subtitle_shape.text = subtitle
        
        # Format the title
        title.text_frame.paragraphs[0].font.size = Pt(44)
        title.text_frame.paragraphs[0].font.bold = True
        title.text_frame.paragraphs[0].font.color.rgb = RGBColor(0, 51, 102)
    
    def add_section_slide(self, section_title):
        """
        Add a section slide to the presentation
        
        Args:
            section_title (str): Title for the section
        """
        slide = self.prs.slides.add_slide(self.section_layout)
        title = slide.shapes.title
        title.text = section_title
        
        # Format the title
        title.text_frame.paragraphs[0].font.size = Pt(40)
        title.text_frame.paragraphs[0].font.bold = True
        title.text_frame.paragraphs[0].font.color.rgb = RGBColor(0, 51, 102)
    
    def add_content_slide(self, title, content):
        """
        Add a content slide to the presentation
        
        Args:
            title (str): Title for the slide
            content (str): Text content for the slide
        """
        slide = self.prs.slides.add_slide(self.title_content_layout)
        title_shape = slide.shapes.title
        content_shape = slide.placeholders[1]
        
        title_shape.text = title
        content_shape.text = content
        
        # Format the title
        title_shape.text_frame.paragraphs[0].font.size = Pt(32)
        title_shape.text_frame.paragraphs[0].font.color.rgb = RGBColor(0, 51, 102)
        
        # Format the content
        for paragraph in content_shape.text_frame.paragraphs:
            paragraph.font.size = Pt(18)
    
    def add_two_column_slide(self, title, left_content, right_content):
        """
        Add a slide with two columns of content
        
        Args:
            title (str): Title for the slide
            left_content (str): Content for the left column
            right_content (str): Content for the right column
        """
        slide = self.prs.slides.add_slide(self.two_content_layout)
        title_shape = slide.shapes.title
        left_shape = slide.placeholders[1]
        right_shape = slide.placeholders[2]
        
        title_shape.text = title
        left_shape.text = left_content
        right_shape.text = right_content
        
        # Format the title
        title_shape.text_frame.paragraphs[0].font.size = Pt(32)
        title_shape.text_frame.paragraphs[0].font.color.rgb = RGBColor(0, 51, 102)
        
        # Format the content
        for shape in [left_shape, right_shape]:
            for paragraph in shape.text_frame.paragraphs:
                paragraph.font.size = Pt(18)
    
    def create_chart(self, chart_type, data, title, x_label=None, y_label=None):
        """
        Create a chart image file
        
        Args:
            chart_type (str): Type of chart ('bar', 'line', 'pie', etc.)
            data (dict or pd.DataFrame): Data for the chart
            title (str): Title for the chart
            x_label (str, optional): Label for the x-axis
            y_label (str, optional): Label for the y-axis
            
        Returns:
            str: Path to the saved chart image
        """
        self.chart_count += 1
        plt.figure(figsize=(10, 6))
        
        if chart_type == 'bar':
            if isinstance(data, dict):
                plt.bar(list(data.keys()), list(data.values()))
            else:  # Assume DataFrame
                data.plot(kind='bar', ax=plt.gca())
        
        elif chart_type == 'line':
            if isinstance(data, dict):
                plt.plot(list(data.keys()), list(data.values()))
            else:  # Assume DataFrame
                data.plot(kind='line', ax=plt.gca())
        
        elif chart_type == 'pie':
            if isinstance(data, dict):
                plt.pie(list(data.values()), labels=list(data.keys()), autopct='%1.1f%%')
            else:  # Assume DataFrame
                data.plot(kind='pie', ax=plt.gca())
        
        elif chart_type == 'scatter':
            if isinstance(data, dict):
                # Assume dict with 'x' and 'y' keys
                plt.scatter(data['x'], data['y'])
            else:  # Assume DataFrame
                data.plot(kind='scatter', x=data.columns[0], y=data.columns[1], ax=plt.gca())
        
        # Set title and labels
        plt.title(title, fontsize=14, fontweight='bold')
        if x_label:
            plt.xlabel(x_label)
        if y_label:
            plt.ylabel(y_label)
        
        # Add grid and style
        plt.grid(True, linestyle='--', alpha=0.7)
        plt.tight_layout()
        
        # Save the chart
        chart_path = os.path.join(self.output_dir, f'chart_{self.chart_count}.png')
        plt.savefig(chart_path, dpi=300, bbox_inches='tight')
        plt.close()
        
        return chart_path
    
    def add_chart_slide(self, title, chart_path, description=None):
        """
        Add a slide with a chart
        
        Args:
            title (str): Title for the slide
            chart_path (str): Path to the chart image
            description (str, optional): Description text for the chart
        """
        slide = self.prs.slides.add_slide(self.title_only_layout)
        title_shape = slide.shapes.title
        title_shape.text = title
        
        # Format the title
        title_shape.text_frame.paragraphs[0].font.size = Pt(32)
        title_shape.text_frame.paragraphs[0].font.color.rgb = RGBColor(0, 51, 102)
        
        # Add the chart
        left = Inches(1.5)
        top = Inches(1.8)
        width = Inches(7)
        height = Inches(4)
        slide.shapes.add_picture(chart_path, left, top, width, height)
        
        # Add description if provided
        if description:
            left = Inches(1)
            top = Inches(6)
            width = Inches(8)
            height = Inches(1)
            txBox = slide.shapes.add_textbox(left, top, width, height)
            tf = txBox.text_frame
            tf.text = description
            
            # Format the description
            for paragraph in tf.paragraphs:
                paragraph.font.size = Pt(14)
                paragraph.font.italic = True
    
    def parse_content_sections(self, content):
        """
        Parse content into sections based on headings
        
        Args:
            content (str): The full content text
            
        Returns:
            dict: Dictionary of section titles and their content
        """
        # Define patterns for section headings
        section_patterns = [
            r'Executive Summary[:\s]*(.*?)(?=\n\s*\n\s*[A-Z][\w\s]+[:\n]|$)',
            r'Introduction[:\s]*(.*?)(?=\n\s*\n\s*[A-Z][\w\s]+[:\n]|$)',
            r'Key Findings[:\s]*(.*?)(?=\n\s*\n\s*[A-Z][\w\s]+[:\n]|$)',
            r'Strategic Recommendations[:\s]*(.*?)(?=\n\s*\n\s*[A-Z][\w\s]+[:\n]|$)',
            r'Conclusion[:\s]*(.*?)(?=\n\s*\n\s*[A-Z][\w\s]+[:\n]|$)'
        ]
        
        section_titles = [
            'Executive Summary',
            'Introduction',
            'Key Findings',
            'Strategic Recommendations',
            'Conclusion'
        ]
        
        sections = {}
        
        # Extract content for each section
        for i, pattern in enumerate(section_patterns):
            match = re.search(pattern, content, re.DOTALL)
            if match:
                sections[section_titles[i]] = match.group(1).strip()
            else:
                # Try a simpler pattern if the complex one fails
                simple_pattern = f'{section_titles[i]}[:\s]*(.*?)(?=\n\s*[A-Z]|$)'
                match = re.search(simple_pattern, content, re.DOTALL)
                if match:
                    sections[section_titles[i]] = match.group(1).strip()
                else:
                    sections[section_titles[i]] = ''
        
        return sections
    
    def generate_from_agent_results(self, data_analysis, content, visual_design):
        """
        Generate a complete presentation from agent results
        
        Args:
            data_analysis (str): Results from the data analysis agent
            content (str): Results from the content writing agent
            visual_design (str): Results from the visual design agent
            
        Returns:
            str: Path to the generated PowerPoint file
        """
        # Parse content into sections
        sections = self.parse_content_sections(content)
        
        # Add title slide
        self.add_title_slide()
        
        # Add executive summary
        if sections.get('Executive Summary'):
            self.add_section_slide('Executive Summary')
            self.add_content_slide('Key Points', sections['Executive Summary'])
        
        # Add introduction
        if sections.get('Introduction'):
            self.add_section_slide('Introduction')
            self.add_content_slide('Background', sections['Introduction'])
        
        # Extract chart suggestions from data analysis
        chart_suggestions = self.extract_chart_suggestions(data_analysis)
        
        # Add key findings with charts
        if sections.get('Key Findings'):
            self.add_section_slide('Key Findings')
            
            # Split key findings into paragraphs
            findings = sections['Key Findings'].split('\n\n')
            
            # Add each finding as a separate slide
            for i, finding in enumerate(findings):
                if finding.strip():
                    # Add chart if available
                    if i < len(chart_suggestions):
                        chart_info = chart_suggestions[i]
                        chart_path = self.create_chart(
                            chart_info['type'],
                            chart_info['data'],
                            chart_info['title'],
                            chart_info.get('x_label'),
                            chart_info.get('y_label')
                        )
                        self.add_chart_slide(f"Finding {i+1}", chart_path, finding)
                    else:
                        self.add_content_slide(f"Finding {i+1}", finding)
        
        # Add strategic recommendations
        if sections.get('Strategic Recommendations'):
            self.add_section_slide('Strategic Recommendations')
            self.add_content_slide('Recommendations', sections['Strategic Recommendations'])
        
        # Add conclusion
        if sections.get('Conclusion'):
            self.add_section_slide('Conclusion')
            self.add_content_slide('Summary', sections['Conclusion'])
        
        # Save the presentation
        output_file = os.path.join(self.output_dir, f"{self.report_topic.replace(' ', '_')}_Report.pptx")
        self.prs.save(output_file)
        
        return output_file
    
    def extract_chart_suggestions(self, data_analysis):
        """
        Extract chart suggestions from data analysis text
        
        Args:
            data_analysis (str): Text from data analysis agent
            
        Returns:
            list: List of chart information dictionaries
        """
        # This is a simplified version - in a real implementation, you would parse the
        # data analysis text to extract actual chart suggestions
        
        # Sample chart data (in a real implementation, this would be extracted from the data analysis)
        chart_suggestions = [
            {
                'type': 'bar',
                'title': 'Quarterly Sales by Category',
                'data': {
                    'Electronics': 425000,
                    'Clothing': 310000,
                    'Home Goods': 275000,
                    'Food & Beverage': 190000,
                    'Beauty': 150000
                },
                'x_label': 'Product Category',
                'y_label': 'Sales ($)'
            },
            {
                'type': 'line',
                'title': 'Monthly Sales Trend',
                'data': {
                    'Jan': 120000,
                    'Feb': 115000,
                    'Mar': 130000,
                    'Apr': 140000,
                    'May': 135000,
                    'Jun': 155000
                },
                'x_label': 'Month',
                'y_label': 'Sales ($)'
            },
            {
                'type': 'pie',
                'title': 'Sales Distribution by Region',
                'data': {
                    'North': 30,
                    'South': 25,
                    'East': 20,
                    'West': 15,
                    'Central': 10
                }
            }
        ]
        
        return chart_suggestions
